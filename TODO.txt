- Make a UI (Electron? NWJS? Browser?)
	- Tabs, so multiple files can be open at once
		- Splitscreen tabs
		- Option to open them in their own window
	- Sidebar with preview of value of current type at current selection
	- Highlight sections with a color and text when you hover over them (stored as: [startOffset, endOffset, text] ?)
	- Perhaps a pattern highlighting? 
		- int32 (length) char[length] (text)
		- int8 (type) 
			- type == 1
				- int32 (userid)
			- type == 2
				- int16 (length) char[length] (username)
			- type === 3
				- int8 (age)
		- etc, basically a structure (is that the right term?) matching for complex storage types.
		- The user could run a command to tell it to highlight a structure (have names given to them) and it will try highlighting at their current positions
		- This could be implemented in the main Herexical code, and just have data which can tell the clients which are selected. Perhaps once/if I make it modular
- Add a method to read/write 128bit numbers
-? Add a method to read/write arbitrary bit numbers? Would make this a whole lot easier
- Make the code more modular.
- Add method to get byte in binary to BufferUtil and View data function
- Add funcs to get Float (32 and 64?) and Double in view data func
- Add a function to get the FileWrap's file name (rather than the dir it's in)
- Make a function to get a lot of constant data (such as file size and filename)
- Add BufferUtil func to get a byte as a string in different encodings
- Add a func to get the offset of a specific byte into the file (currentViewPos + offsetIntoBuffer should work)
-? Add a func to loop over buffer data like they're rows. (Like, how a UI might have space for 28 bytes, so it gives all 28 at once and maybe offset?) This would make it easier for ui's
- Have module functions that are only included if need be? It's not like they'll have much of an impact on the filesize/memusage if they're unused, so maybe not?
- Add a setting to View if it can unload (aka set the current loaded buffer to null and hope the GC gets it) while it's not being viewed
	- requires adding a variable that tells the View if it's being viewed that the UI Designer uses
- Perhaps a UIView class that extends View and comes with fancy functions that are useful for UI's but not as useful elsewhere? That sounds like a good idea
- Add Find and Replace function
	- Have it also accept regex? That makes it more complicated.
	- Case sensitivity options
	- Search for string or hex values
- Add a function to expand file. Expand a file by X Bytes. Would need a special EditStorage code or something
- Add a function to fully delete part of file. Would need a special EditStorage code or something
- Add a utility function to get all values out of an iter and asynciter
	- Then implement that on the search generators to make a bit less repeated code